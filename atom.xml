<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tedz]]></title>
  <link href="http://tedzhou.github.com/atom.xml" rel="self"/>
  <link href="http://tedzhou.github.com/"/>
  <updated>2013-03-25T00:21:46+08:00</updated>
  <id>http://tedzhou.github.com/</id>
  <author>
    <name><![CDATA[tedzhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[csstest]]></title>
    <link href="http://tedzhou.github.com/blog/2013/03/24/csstest/"/>
    <updated>2013-03-24T23:55:00+08:00</updated>
    <id>http://tedzhou.github.com/blog/2013/03/24/csstest</id>
    <content type="html"><![CDATA[<h1>cssTest工具失败经历记录</h1>

<h2>背景</h2>

<p>之前和龙哥一起做了个导航条优化的需求，修改了导航条顶部导航的html结构和样式。过程中发现js代码没有改动的滚动的逻辑，新导航上了之后在android
的chrome 上<em>滚动</em>卡的EB，Webview 中也有些卡顿，但没有chrome 里卡。这是我第一次意识到chrome也会卡，那chrome 和webview
可能不是用同一套渲染模型（当然大部分情景chrome是快多了的）。当时龙哥把几个臭名远瞩的<em>css属性</em>(<code>box-shadow</code>/<code>border-radius</code>)
干掉后立马就不那么卡了。</p>

<p>这使我有想法去监控下是什么样式改动会导致滚动变卡，毕竟触屏是个大项目，css样式也不少，大海捞针明显不科学。尽管PC上chrome的dev
tools很好用，却没能告诉开发者究竟是哪一行样式是性能瓶颈。我大海捞针在google找办法，终于找到一个<a href="http://andy.edinborough.org/CSS-Stress-Testing-and-Performance-Profiling">通过js模拟滚动的监控思路</a>。</p>

<h2>思路</h2>

<p><a href="http://andy.edinborough.org/CSS-Stress-Testing-and-Performance-Profiling">原文</a>
作者的思路是遍历所有dom元素，去掉每个<code>dom</code>元素的<code>id</code>和<code>css-class</code>，然后用js设置<code>window
.scrollBy</code>去模拟滚动，然后记录<em>滚动时间/滚动的帧数</em>(不是准确的帧数，只是onscroll触发的次数）现在为了方便记<em>滚动时间/滚动的帧数</em>为<code>spf</code>，为了不和<code>fps</code>搞混，故意反过来写，当然<code>spf</code>越小越好。如果去掉某个css-class后<code>spf</code>明显变小，则说明这个css样式产生了不好的影响。</p>

<p>借鉴这个思路，我做了这个cssTest工具，有一下几个修改：
1. 我的目的是找出某一条css属性影响了性能，如果通过id和css-class来遍历会相对笼统。所以我遍历所有css属性，每次把所有dom
的某一条属性还原为默认值，然后滚动测试<code>spf</code>。
2. 原工具是上下来回滚动100px，那页面下面的某些元素却没有被渲染，不准。所以改成从上到下每次滚1px，滚3000ms。
3. 提供对比功能，输入某个css属性，试验出原样式和样式修改后的差别。</p>

<h2>实验结果</h2>

<h3>PC的Chrome</h3>

<p>在PC上的实验结果真的让我以为找到了<em>答案</em>。
如图，<code>==base==</code>为原始的样式。去掉<code>position:fixed</code>后的<code>spf</code>和<code>==base==</code>甚至小了3、4
倍！而且这个实验结果也是符合预期的，<code>position:fixed</code>对滚动性能的影响也是众所周知的差了（[参见: Google I/O 2012 ]
(http://www.youtube.com/embed/hAzhayTnhEI?rel=0)）。</p>

<p><img src="http://tedzhou.github.com/images/pc_chrome.jpg"></p>

<p>而且排第二差的是一个用来治疗ios图片加载闪屏的属性，android上用不上的css属性（其实ios上也没达到正常疗效），那么干掉它就能达到提升性能的目的了！当然，必须要在手机上有同样的表现才有证明这个工具works。</p>

<h3>手机上的Chrome</h3>

<p>手机上的Chrome同样找出了<code>position:fixed</code>的<code>spf</code>比<code>==base==</code>小1倍，也符合预期。</p>

<p><img src="http://tedzhou.github.com/images/mobile_chrome.jpg"></p>

<p>为了验证这个工具能找出<code>position:fixed</code>之外的性能瓶颈，我
把之前龙哥去掉的<code>box-shadow</code>加上，也能查出来。那就表示这个工具还真有用！</p>

<p><img src="http://tedzhou.github.com/images/mobile_chrome_boxshadow.jpg"></p>

<h3>webview</h3>

<p>目前触屏项目访问量最多的入口就是在webview，而且用户投诉也是集中在webview上。但在webview的测试结果却呈现出完全无规律的状态。<code>spf
</code>没有明显小的也没有明显大的。说明在webview里面，这个思路行不通。</p>

<p><img src="http://tedzhou.github.com/images/mobile_webview.jpg"></p>

<h2>分析模型失败的原因</h2>

<p>原因其实很简单，我假象的浏览器渲染模型是:用户触发滚动->页面渲染->触发scroll事件。
只要记录下一段时间内的scroll触发的次数就可以估出页面渲染的性能，因为css样式渲染慢了，scroll事件就触发得少。但缺陷就在于js触发的滚动
浏览器不保证每次会去渲染，有可能就直接触发scroll事件了。
但PC上还是有一定规律可循的，会在连续scroll n次之后渲染一次，那么css样式影响渲染还是可以体现出来。</p>

<p>但在webview就完全没有规律了。由此可以猜想webview和chrome的渲染方式不一样，参考<a href="http://www.chromium.org/developers/design-documents/rendering-architecture-diagrams">Rendering Architecture Diagrams</a>
。chrome用的是<code>Composited GPU rendering</code> 那么webview也许是<code>software
rendering</code>。有一个有趣的是，如果在页面放上<code>box-shadow</code>，手机的chrome反而比webview要忙，因为<a href="http://aerotwist.com/blog/on-translate3d-and-layer-creation-hacks/">Where things get
really messy is on mobile devices, because they have comparatively limited VRAM, and it becomes easy to exhaust that and end up with excruciatingly poor rendering performance</a></p>

<h2>总结</h2>

<p>cssTest工具没有成功，让我对纯js监控css性能产生了怀疑。希望能自己包装webview，在webview里直接监控css的fps
。虽然已经有了查看fps的应用，因为要去掉每个css样式，再记录fps，现有的fps还是不够用的。</p>

<h2>source code</h2>

<p><a href="https://github.com/tedzhou/csstest/blob/master/csstest.js">放在github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about_tracing]]></title>
    <link href="http://tedzhou.github.com/blog/2013/01/23/about-tracing/"/>
    <updated>2013-01-23T19:27:00+08:00</updated>
    <id>http://tedzhou.github.com/blog/2013/01/23/about-tracing</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proxy]]></title>
    <link href="http://tedzhou.github.com/blog/2012/12/28/proxy/"/>
    <updated>2012-12-28T20:17:00+08:00</updated>
    <id>http://tedzhou.github.com/blog/2012/12/28/proxy</id>
    <content type="html"><![CDATA[<h1>一键代理</h1>

<hr />

<h2>目的</h2>

<hr />

<p>android 2.3没有全局的代理机制，手机上调试太困难。 所以这个工具的目的就是让android 2.3手机上使用PC上的fiddler来做代理工具。</p>

<hr />

<h2>实现</h2>

<hr />

<p>android上虽然没有全局代理，但是每个连接实际上都被防火墙(<a href="http://www.netfilter.org/"><code>iptables</code></a>)截获，那么在防火墙上监听<code>80端口</code>，然后转发到PC上的<code>fiddle</code>就好了。可惜iptables只能把包转发到本机，那么可以在android手机上运行一个进程，监听某个端口，<code>iptables</code>把包转到那端口，再由改进程把包转到PC的<code>80端口</code>。</p>

<h3>adb工具</h3>

<hr />

<p>adb全称是<a href="http://developer.android.com/tools/help/adb.html">Android Debug Bridge</a>。
允许PC通过usb数据线调试android手机，我们利用adb来进行手机与PC的通信。</p>

<h3>iptables</h3>

<hr />

<p>iptables贯穿整个网络传输流程，这里只关注出口监控，只要是将要从80端口发出的都是我们需要代理的包。</p>

<pre><code>adb shell /tedproxy/iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDIRECT --to 8123
</code></pre>

<p>通过以上代码即可实现80端口的包都转到8123上。</p>

<h3>redsocks</h3>

<hr />

<p>redsocks 是开源的包转发工具。进行一下配置就可以监听8123端口的数据包，然后转发到<code>10.55.58.111:8888</code>上，一般是fiddler。</p>

<pre><code>```
redsocks {
    local_ip = 127.0.0.1;
    local_port = 8123;
    ip = 10.66.58.111;
    port = 8888;
    type = http-relay;
}
```
</code></pre>

<p>这里需要利用下adb工具，因为每次开机pc的ip地址都是不一样的，那么每次都要手动填写配置是相当麻烦的，
所以这里我们用adb工具来把pc的ip地址写入redsocks的配置里面，这样会方便很多。而通过批处理文件获取ip比较麻烦，因为批处理文件对字符串操作还是比较弱，
所以使用了node来获取ip地址。</p>

<h3>利用freewifi</h3>

<hr />

<p>如果PC和手机不是在同一个局域网内会出现NAT映射之类的问题导致手机转发过去的包PC无法收到。所以为了让PC和手机在同一个局域网，我利用了<code>freewifi</code>。
手机能连上<code>freewifi</code>这是毫无疑问的，但PC要连上freewif就需要多一张无线网卡。同时，当PC出现了两张网卡的时候，
网络会出现问题的。因为PC发出去的数据包不知道走那个网卡出去。</p>

<p>解决方法是配置route表。</p>

<pre><code>```
route delete 0.0.0.0
route add 0.0.0.0 mask 0.0.0.0 %freewifi_gate%
route add 10.0.0.0 mask 255.0.0.0 %inter_gate%
route add 192.0.0.0 mask 255.0.0.0 %inter_gate%
route add 172.0.0.0 mask 255.0.0.0 %inter_gate%
route add 119.0.0.0 mask 255.0.0.0 %inter_gate%
```
</code></pre>

<p>以上代码实现的是，让内网的ip都走连接都走PC原本的网卡，其他连接都走freewifi. 这样就能兼容两张网卡的使用了.</p>

<p>虽然以上代码看起来很简单，但是因为公司网络比较复杂，这里我还是用了nodejs来完成上述的设置.</p>

<h3>最后串起来</h3>

<hr />

<p>最后串起来的流程应该是这样的:
1. 运行<code>network.bat</code>. network.bat会调用nodejs，把PC上的两张网卡兼容了。
2. 运行<code>run.bat</code> 。这里会先调用nodejs，把ip地址拿到，生成redsocks配置文件传送到手机上,然后脚本配置<code>iptables</code>和启动<code>resocks</code>进程。 (虽然是一键，但是流程还蛮多的~)
3. 记得把手机通过usb连上PC上，还要打开pc上的fiddler，还要打开fiddler的远程代理呀(这个大家都会的就不说了)。</p>

<p>当不需要代理的时候运行<code>stop.bat</code>清空<code>iptables</code>的规则即可。</p>

<h2>依赖</h2>

<hr />

<ol>
<li>手机必须root了，否则没有权限改iptables</li>
<li>PC上有安装nodejs和fiddler.</li>
<li>要有一张无线网卡.</li>
</ol>


<h2>说明下</h2>

<hr />

<p>因为安卓手机型号太多，不一定每个型号都测过，如果有问题欢迎联系我.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tap]]></title>
    <link href="http://tedzhou.github.com/blog/2012/12/22/tap/"/>
    <updated>2012-12-22T15:11:00+08:00</updated>
    <id>http://tedzhou.github.com/blog/2012/12/22/tap</id>
    <content type="html"><![CDATA[<h1>开发touch遇到的坑之一:android下浏览器tap无反应</h1>

<p>第一次发touch版本就遇到各种问题，这是第一个问题：android 2。3的机器上， <code>a标签</code>上<code>delegate</code>了个<code>tap</code>事件，点击后<code>a标签</code>高亮了，却<em>有时候</em>没有触发<code>tap</code>。</p>

<p>遇到这个问题的时候我第一反应就是要换个底层库，因为我们用的是自己写的库，明显是最让人不放心的。但问题是换了<code>zetpo</code>之后还是没有解决这个问题，这时候就有点凌乱了。因为要赶着上活动，接着就各种风声鹤唳地想办法，最后也不知道是怎么定下来的:</p>

<pre><code>用`touchstart`事件代替`tap`，然后把字体改大些就稍微好点了，*多数情况*下点击`a标签`都会有响应了。
</code></pre>

<p>虽然版本发了，但是<code>touchstart</code>事件带来其他副作用，例如太容易误操作了。所以还是要研究个彻底。</p>

<hr />

<h2>结论</h2>

<p>考虑到这些研究比较白痴，无非就是一些排列组合，所以直接给出结论:</p>

<ol>
<li>可点击区域小的时候， <code>touch</code> 不一定会触发， 但<code>click</code> 一定会触发， <code>href</code> 也会触发。(a标签高亮了是因为href)。</li>
<li>事件触发顺序是<code>touch</code> -> <code>click</code> -><code>href</code></li>
<li>&#8220;命中率&#8221;来说， <code>href</code>==<code>click</code> > <code>touchstart</code> > <code>"tap"</code></li>
</ol>


<p><em>虽然tap在android 2。3下命中比较低， 但由于tap还是会比click响应要快， 所以多数情况下还是采用增大可点击区域使用tap事件会更好。</em></p>

<hr />

<h2><a href="http://tedzhou.github.com/demo/tap.html">Demo</a></h2>

<ol>
<li>第一部分测试字体大小delegate <code>tap/touchstart</code> 和<code>href</code> 的命中率， 结论是字体小的<code>tap</code> 命中率非常低， <code>href</code>全命中。 换用<code>touchstart</code> ， <code>touchstart</code> 的成功率比<code>tap</code> 的高， 但也比<code>href</code> 要低，不是全中。</li>
<li>第二部分测试<code>href</code> 对delegate <code>tap/touchstart</code> 命中有没有影响， 结论<code>tap</code> 和<code>touchstart</code> 还是命中率非常低。</li>
<li>第三部分测试加上<code>padding</code> 后增大可点击区域命中率有无提升，结论是有的。</li>
<li>第四部分测试不用delegate， <code>touchstart</code> 和<code>href</code> 的命中率， 结论是和第一部分测试没啥区别。</li>
<li>第五部分测试<code>onclick</code> 和<code>href</code> 的命中率， 结论是两者都是全中的。</li>
<li>第六部分测试<code>onclick</code> 和<code>touchstart</code> 的命中率， 结论是<code>onclick</code> 还是全中， <code>touchstart</code> 字体小的还是比较低。</li>
<li>注意的是， 以上六个测试都符合事件触发顺序是touch->click->href。</li>
</ol>

]]></content>
  </entry>
  
</feed>
